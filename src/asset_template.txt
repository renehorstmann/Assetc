// warning, this file was autogenerated/ compiled with assetc.
// See https://github.com/renehorstmann/Assetc

#include <string.h>
#include <stdbool.h>

#include "asset.h"


@file_init

static unsigned hash(const char *key) {
    unsigned hash = 5381;
    int c;
    while ((c = *key++))
        hash = ((hash << 5u) + hash) + c; /* hash * 33 + c */
    return hash;
}

// linked list of asset
typedef struct llist {
    const char *key;
    asset value;
    struct llist *next;
} llist;

#define LLIST_INIT(name, data) \
{ \
    .key = name, \
    .value = (asset) {data, sizeof(data) -1},\
    .next = NULL \
}


// hash map -> array of linked list of asset (so if to items got the same hash, they end up in the list)
#define MAP_SIZE 2
static llist *map[MAP_SIZE];

static void map_add(llist *list_item_ptr, const char *name) {
    llist **map_item = &map[hash(name) % MAP_SIZE];
    while (*map_item)
        map_item = &((*map_item)->next);
    *map_item = list_item_ptr;
}

static llist *map_get(const char *name) {
    llist *item = map[hash(name) % MAP_SIZE];
    while (item && strcmp(item->key, name) != 0)
        item = item->next;
    return item;
}

static void map_init() {
    // set all map entries to NULL
    memset(map, 0, sizeof(map));

@list_init

@map_init
}


asset asset_get(const char *file) {
    static bool loaded = false;
    if (!loaded) {
        loaded = true;
        map_init();
    }

    asset res = {NULL, 0};
    llist *item = map_get(file);
    if (item)
        res = item->value;
    return res;
}
